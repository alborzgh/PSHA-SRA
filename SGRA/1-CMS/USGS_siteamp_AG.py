# -*- coding: utf-8 -*-
"""
Created on Fri Jan 15 00:39:28 2021

@author: FELi
USGS2018 site amplification term
"""
import numpy as np
from numpy.lib.twodim_base import mask_indices
from scipy.interpolate import interp1d



def site_amp_calc(ip, vs30,
             pgaRock):
    ## (pgaRock = peak acceleration for 3000 m/s reference rock in g)
    
    #### T, f760i, f760g, f760is, f760gs, c,  V1,   V2,  Vf, sig_vc, sig_l, sig_u,
####      f3,       f4,       f5,   Vc, sig_c
 
    coeff_siteamp_us2018_vs2000 = np.array([
      [-1.0,   0.375, 0.297,  0.313,  0.117, -0.449, 331,  760, 314,  0.251, 0.306, 0.334, 0.06089, -0.08344, -0.00667, 2257, 0.120],
      [0.00,   0.185, 0.121,  0.434,  0.248, -0.290, 319,  760, 345,  0.300, 0.345, 0.480, 0.07520, -0.43755, -0.00131, 2990, 0.120],
      [0.01,  0.185, 0.121,  0.434,  0.248, -0.290, 319,  760, 345,  0.300, 0.345, 0.480, 0.07520, -0.43755, -0.00131, 2990, 0.120],
      [0.02,  0.185, 0.031,  0.434,  0.270, -0.303, 319,  760, 343,  0.290, 0.336, 0.479, 0.05660, -0.41511, -0.00098, 2990, 0.120],
      [0.03,  0.224, 0.000,  0.404,  0.229, -0.315, 319,  810, 342,  0.282, 0.327, 0.478, 0.10360, -0.49871, -0.00127, 2990, 0.120],
    # [0.04,  0.283, 0.012,  0.390,  0.139, -0.331, 319,  900, 340,  0.275, 0.317, 0.477, 0.11836, -0.48734, -0.00169, 2990, 0.120],
      [0.05,  0.337, 0.062,  0.363,  0.093, -0.344, 319, 1010, 338,  0.271, 0.308, 0.476, 0.16781, -0.58073, -0.00187, 2990, 0.120],
      [0.075, 0.475, 0.211,  0.322,  0.102, -0.348, 319, 1380, 334,  0.269, 0.285, 0.473, 0.17386, -0.53646, -0.00259, 2990, 0.120],
     [0.1,   0.674, 0.338,  0.366,  0.088, -0.372, 317, 1900, 319,  0.270, 0.263, 0.470, 0.15083, -0.44661, -0.00335, 2990, 0.120],
     # [0.1,   0.521, 0.338,  0.293,  0.088, -0.372, 317, 1900, 319,  0.270, 0.263, 0.470, 0.15083, -0.44661, -0.00335, 2990, 0.120],
      [0.15,  0.586, 0.470,  0.253,  0.066, -0.385, 302, 1500, 317,  0.261, 0.284, 0.402, 0.14272, -0.38264, -0.00410, 2335, 0.120],
      [0.2,   0.419, 0.509,  0.214,  0.053, -0.403, 279, 1073, 314,  0.251, 0.306, 0.334, 0.12815, -0.30481, -0.00488, 1533, 0.120],
      [0.25,  0.332, 0.509,  0.177,  0.052, -0.417, 250,  945, 282,  0.238, 0.291, 0.357, 0.13286, -0.27506, -0.00564, 1318, 0.135],
      [0.3,   0.270, 0.498,  0.131,  0.055, -0.426, 225,  867, 250,  0.225, 0.276, 0.381, 0.13070, -0.22825, -0.00655, 1152, 0.150],
      [0.4,   0.209, 0.473,  0.112,  0.060, -0.452, 217,  843, 250,  0.225, 0.275, 0.381, 0.09414, -0.11591, -0.00872, 1018, 0.150],
      [0.5,   0.175, 0.447,  0.105,  0.067, -0.480, 217,  822, 280,  0.225, 0.311, 0.323, 0.09888, -0.07793, -0.01028,  939, 0.150],
      [0.75,  0.127, 0.386,  0.138,  0.077, -0.510, 227,  814, 280,  0.225, 0.330, 0.310, 0.06101, -0.01780, -0.01456,  835, 0.125],
      [1.0,   0.095, 0.344,  0.124,  0.078, -0.557, 255,  790, 300,  0.225, 0.377, 0.361, 0.04367, -0.00478, -0.01823,  951, 0.060],
      [1.5,   0.083, 0.289,  0.112,  0.081, -0.574, 276,  805, 300,  0.242, 0.405, 0.375, 0.00480, -0.00086, -0.02000,  882, 0.050],
      [2.0,   0.079, 0.258,  0.118,  0.088, -0.584, 296,  810, 300,  0.259, 0.413, 0.388, 0.00164, -0.00236, -0.01296,  879, 0.040],
      [3.0,   0.073, 0.233,  0.111,  0.100, -0.588, 312,  820, 313,  0.306, 0.410, 0.551, 0.00746, -0.00626, -0.01043,  894, 0.040],
      [4.0,   0.066, 0.224,  0.120,  0.109, -0.579, 321,  821, 322,  0.340, 0.405, 0.585, 0.00269, -0.00331, -0.01215,  875, 0.030],
      [5.0,   0.064, 0.220,  0.108,  0.115, -0.558, 324,  825, 325,  0.340, 0.409, 0.587, 0.00242, -0.00256, -0.01325,  856, 0.020],
      [7.5,   0.056, 0.216,  0.082,  0.130, -0.544, 325,  820, 328,  0.345, 0.420, 0.594, 0.04219, -0.00536, -0.01418,  832, 0.020],
      [10.0,  0.053, 0.218,  0.069,  0.137, -0.507, 325,  820, 330,  0.350, 0.440, 0.600, 0.05329, -0.00631, -0.01403,  837, 0.020],
        ])

    coeff_siteamp_us2018_vs760 = np.array([
         [-1.0,   0.375, 0.297,  0.313,  0.117, -0.449, 331,  760, 314,  0.251, 0.306, 0.334, 0.06089, -0.08344, -0.00667, 2257, 0.120],
      [0.00,   0.185, 0.121,  0.434,  0.248, -0.290, 319,  760, 345,  0.300, 0.345, 0.480, 0.07520, -0.43755, -0.00131, 2990, 0.120],
      [0.01,  0.185, 0.121,  0.434,  0.248, -0.290, 319,  760, 345,  0.300, 0.345, 0.480, 0.07520, -0.43755, -0.00131, 2990, 0.120],
      [0.02,  0.185, 0.031,  0.434,  0.270, -0.303, 319,  760, 343,  0.290, 0.336, 0.479, 0.05660, -0.41511, -0.00098, 2990, 0.120],
      [0.03,  0.224, 0.000,  0.404,  0.229, -0.315, 319,  810, 342,  0.282, 0.327, 0.478, 0.10360, -0.49871, -0.00127, 2990, 0.120],
    # [0.04,  0.283, 0.012,  0.390,  0.139, -0.331, 319,  900, 340,  0.275, 0.317, 0.477, 0.11836, -0.48734, -0.00169, 2990, 0.120],
      [0.05,  0.337, 0.062,  0.363,  0.093, -0.344, 319, 1010, 338,  0.271, 0.308, 0.476, 0.16781, -0.58073, -0.00187, 2990, 0.120],
      [0.075, 0.475, 0.211,  0.322,  0.102, -0.348, 319, 1380, 334,  0.269, 0.285, 0.473, 0.17386, -0.53646, -0.00259, 2990, 0.120],
     #[0.1,   0.674, 0.338,  0.366,  0.088, -0.372, 317, 1900, 319,  0.270, 0.263, 0.470, 0.15083, -0.44661, -0.00335, 2990, 0.120],
      [0.1,   0.521, 0.338,  0.293,  0.088, -0.372, 317, 1900, 319,  0.270, 0.263, 0.470, 0.15083, -0.44661, -0.00335, 2990, 0.120],
      [0.15,  0.586, 0.470,  0.253,  0.066, -0.385, 302, 1500, 317,  0.261, 0.284, 0.402, 0.14272, -0.38264, -0.00410, 2335, 0.120],
      [0.2,   0.419, 0.509,  0.214,  0.053, -0.403, 279, 1073, 314,  0.251, 0.306, 0.334, 0.12815, -0.30481, -0.00488, 1533, 0.120],
      [0.25,  0.332, 0.509,  0.177,  0.052, -0.417, 250,  945, 282,  0.238, 0.291, 0.357, 0.13286, -0.27506, -0.00564, 1318, 0.135],
      [0.3,   0.270, 0.498,  0.131,  0.055, -0.426, 225,  867, 250,  0.225, 0.276, 0.381, 0.13070, -0.22825, -0.00655, 1152, 0.150],
      [0.4,   0.209, 0.473,  0.112,  0.060, -0.452, 217,  843, 250,  0.225, 0.275, 0.381, 0.09414, -0.11591, -0.00872, 1018, 0.150],
      [0.5,   0.175, 0.447,  0.105,  0.067, -0.480, 217,  822, 280,  0.225, 0.311, 0.323, 0.09888, -0.07793, -0.01028,  939, 0.150],
      [0.75,  0.127, 0.386,  0.138,  0.077, -0.510, 227,  814, 280,  0.225, 0.330, 0.310, 0.06101, -0.01780, -0.01456,  835, 0.125],
      [1.0,   0.095, 0.344,  0.124,  0.078, -0.557, 255,  790, 300,  0.225, 0.377, 0.361, 0.04367, -0.00478, -0.01823,  951, 0.060],
      [1.5,   0.083, 0.289,  0.112,  0.081, -0.574, 276,  805, 300,  0.242, 0.405, 0.375, 0.00480, -0.00086, -0.02000,  882, 0.050],
      [2.0,   0.079, 0.258,  0.118,  0.088, -0.584, 296,  810, 300,  0.259, 0.413, 0.388, 0.00164, -0.00236, -0.01296,  879, 0.040],
      [3.0,   0.073, 0.233,  0.111,  0.100, -0.588, 312,  820, 313,  0.306, 0.410, 0.551, 0.00746, -0.00626, -0.01043,  894, 0.040],
      [4.0,   0.066, 0.224,  0.120,  0.109, -0.579, 321,  821, 322,  0.340, 0.405, 0.585, 0.00269, -0.00331, -0.01215,  875, 0.030],
      [5.0,   0.064, 0.220,  0.108,  0.115, -0.558, 324,  825, 325,  0.340, 0.409, 0.587, 0.00242, -0.00256, -0.01325,  856, 0.020],
      [7.5,   0.056, 0.216,  0.082,  0.130, -0.544, 325,  820, 328,  0.345, 0.420, 0.594, 0.04219, -0.00536, -0.01418,  832, 0.020],
      [10.0,  0.053, 0.218,  0.069,  0.137, -0.507, 325,  820, 330,  0.350, 0.440, 0.600, 0.05329, -0.00631, -0.01403,  837, 0.020],
        ])

    if (vs30>1900):
        coeff_siteamp_us2018 = coeff_siteamp_us2018_vs2000
    else:
        coeff_siteamp_us2018 = coeff_siteamp_us2018_vs760
        # coeff_siteamp_us2018 = coeff_siteamp_us2018_vs2000

    V_MIN = 150.0
    V_MAX = 3000.0
    V_LIN_REF = 760.0
    VL = 200.0
    VU = 2000.0
    
    VW1 = 600.0
    VW2 = 400.0
    WT1 = 0.767 #// impedance model @ VW1
    WT2 = 0.1 #// impedance model @ VW2
    WT_SCALE = (WT1 - WT2) / (np.log(VW1) - np.log(VW2))# // â‰ˆ1.65


    T = coeff_siteamp_us2018[:,0]
    f760i_all = coeff_siteamp_us2018[:,1]
    f760g_all = coeff_siteamp_us2018[:,2]
    f760is_all = coeff_siteamp_us2018[:,3]
    f760gs_all = coeff_siteamp_us2018[:,4]
    c_all = coeff_siteamp_us2018[:,5]
    V1_all = coeff_siteamp_us2018[:,6]
    V2_all = coeff_siteamp_us2018[:,7]
    Vf_all = coeff_siteamp_us2018[:,8]
    sig_vc_all = coeff_siteamp_us2018[:,9]
    sig_l_all = coeff_siteamp_us2018[:,10]
    sig_u_all = coeff_siteamp_us2018[:,11]
    f3_all = coeff_siteamp_us2018[:,12]
    f4_all = coeff_siteamp_us2018[:,13]
    f5_all = coeff_siteamp_us2018[:,14]
    Vc_all = coeff_siteamp_us2018[:,15]
    sig_c_all = coeff_siteamp_us2018[:,16]
    
    f760i = interp1d(T, f760i_all)(ip)
    f760g = interp1d(T, f760g_all)(ip)
    f760is = interp1d(T, f760is_all)(ip)
    f760gs = interp1d(T, f760gs_all)(ip)
    
    c = interp1d(T, c_all)(ip)
    v1 = interp1d(T, V1_all)(ip)
    v2 = interp1d(T, V2_all)(ip)
    vf = interp1d(T, Vf_all)(ip)
    
    sig_vc = interp1d(T, sig_vc_all)(ip)
    sig_l = interp1d(T, sig_l_all)(ip)
    sig_u = interp1d(T, sig_u_all)(ip)
    
    f3 = interp1d(T, f3_all)(ip)
    f4 = interp1d(T, f4_all)(ip)
    f5 = interp1d(T, f5_all)(ip)
    vc = interp1d(T, Vc_all)(ip)
    sig_c = interp1d(T, sig_c_all)(ip)
    
    if (vs30 > V_MAX):
        return 0,0
    elif (vs30<V_MIN):
        vs30 = V_MIN
    
# /* Linear response */

#   /*
#    * Vs30 dependent f760 model: impedance vs. gradient
#    * 
#    * The final model gives 2/3 weight to a weight scaling model of
#    * [0.9i,0.1g] to [0.1i,0.9g] and 1/3 weight to a weight scaling model of
#    * [0.5i,0.5g] to [0.1i,0.9g]. This results in a final weight scaling
#    * model of [0.767i,0.233g] at 600 m/s and [0.1i,0.9g] at 400 m/s.
#    */
    wti =  WT1
    if (vs30 < VW2):
        wti = WT2 ##// impedance = 0.1 @ Vs30 < 400
    elif (vs30 < VW1):
        wti = WT_SCALE * np.log(vs30 / VW2) + WT2
    wtg = 1.0 - wti

    f760 = f760i * wti + f760g * wtg
    f760s = f760is * wti + f760gs * wtg

    fv = 0.0
    v_aux = np.where(vs30 <= v1, v1, np.where(vs30 <= v2, vs30, np.where(vs30 <= VU, v2, np.nan)))
    v_aux = np.array(v_aux, dtype=np.float)
  ##    /* Equivalent to equation 3 for 2000 < vs30 < 3000 */
    f2000 = c * np.log(v2 / V_LIN_REF)
    fv_aux1 = interp1d([np.log(VU),np.log(V_MAX)], np.transpose([f2000, -f760]), bounds_error=False, fill_value=np.nan)(np.log(vs30))
    fv_aux2 =  c * np.log(v_aux / V_LIN_REF)
    fv = np.where(np.isnan(v_aux), fv_aux1, fv_aux2)

      
    fvs = 0.0
    sT = sig_l - sig_vc
    vT = np.where(vs30 <= vf, (vs30 - VL) / (vf - VL), np.where(vs30 <= VU, (vs30 - v2) / (VU - v2), np.nan))
    fvs = np.where(vs30 <= vf, sig_l - 2.0 * sT * vT + sT * vT * vT, np.where(vs30 <= v2, sig_vc, np.where(vs30 <= VU, sig_vc + (sig_u - sig_vc) * vT * vT, sig_u * (1.0 - np.log(vs30 / VU) / np.log(V_MAX / VU)))))

    fLin = fv + f760
    sigma_Lin = np.sqrt(fvs * fvs + f760s * f760s)
    print("f760=",  np.exp(f760), ", fv=", np.exp(fv))
 # ##/* Nonlinear response */

    #vRefNl = (c.imt.ordinal() >= Imt.SA0P4.ordinal()) ? V_MAX : V_LIN_REF
    vRefNl = np.where(ip >= 0.4, V_MAX, V_LIN_REF)
    # if(ip>=0.4):
    #     vRefNl =  V_MAX
    # else:
    #     vRefNl = V_LIN_REF
    rkRefTerm = np.log((pgaRock + f3) / f3)

    fNonlin = np.where(vs30 < vc, rkRefTerm*(f4 * (np.exp(f5 * (np.where(vs30 < vRefNl, vs30, vRefNl) - 360.0)) - np.exp(f5 * (vRefNl - 360.0)))), 0.0)

    sf2 = 0.0
    if (vs30 < 300.0):
      sf2 = sig_c
    elif (vs30 < 1000.0):
      sf2 = sig_c - sig_c / np.log(1000.0 / 300.0) * np.log(vs30 / 300.0)
    
    sNonlin = sf2 * rkRefTerm

    fT = fLin + fNonlin
    sT = np.sqrt(sigma_Lin * sigma_Lin + sNonlin * sNonlin)

    return fT, sT
          
def site_amp(period_list, vs30,
             pgaRock):
       
    fT_out, sT_out = site_amp_calc(period_list, vs30, pgaRock)  
    fT_out = np.exp(fT_out)
        
    return fT_out, sT_out

def site_amp_apply(mu, ft, sigmat):
  SIGMA_WTS = [0.185, 0.63, 0.185]
  mu_amp = mu + ft
  return np.log(SIGMA_WTS[0] * np.exp(mu_amp+sigmat) + SIGMA_WTS[1] * np.exp(mu_amp) + SIGMA_WTS[2] * np.exp(mu_amp - sigmat))



# period_list = [0.01, 0.1, 1,5]
# period_list = (0.01,0.015,0.02,0.025,0.03,0.04,0.05,0.075,
#                 0.1,0.15,0.2,0.25,0.3,0.4,0.5,0.75,
#                 1,1.5,2,3,4,5,7.5,10)#,"PGA","PGV") # range:0.01-10sec
# print("ii", type(period_list))
# vs30 = 760
# pgaRock = 0.5   
# fT, sT = site_amp(period_list, vs30, pgaRock)  
       
# print("fT = ", fT, ", sT=", sT)

if __name__ == "__main__":
    site_amp(np.logspace(-2,1,100), 750, 0.2)